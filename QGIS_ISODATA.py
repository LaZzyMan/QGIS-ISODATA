# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGIS_ISODATA
                                 A QGIS plugin
 An ISODATA plugin for QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-06
        git sha              : $Format:%H$
        copyright            : (C) 2018 by LaZzy
        email                : 924797163@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from PyQt5 import QtWidgets
from qgis.core import QgsProject
import matplotlib.image as image
from scipy import misc
from numpy import *
from .progress_dialog import ProgressBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .QGIS_ISODATA_dialog import ISODATA
import os.path
from numba import jit


@jit(nopython=True)
def distance(l1, l2):
    d = 0
    l = l1 - l2
    for x in l:
        d = d + x**2
    return sqrt(d)


def findArray(A, arr):
    for i, a in zip(range(len(A)), A):
        if (a == arr).all():
            return i
    return -1


class QGIS_ISODATA:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QGIS_ISODATA_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        # self.dlg = QGIS_ISODATADialog()
        self.dlg = ISODATA()
        self.progressBar = ProgressBar()
        # 插件模式下的响应和UI修改
        self.dlg.pushButton_add.clicked.connect(self.add_layer)
        self.dlg.pushButton_save.clicked.connect(self.save_layer)
        self.dlg.pushButton_remove.clicked.connect(self.remove_layer)
        self.dlg.pushButton_save.setText('保存结果')
        self.dlg.pushButton_add.setText('添加通道')
        self.dlg.pushButton_remove.setText('删除通道')
        self.layers = []

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QGIS_ISODATA')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QGIS_ISODATA')
        self.toolbar.setObjectName(u'QGIS_ISODATA')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QGIS_ISODATA', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.add_action(
            ':/plugins/QGIS_ISODATA/src/icon.png',
            text=self.tr(u'Home'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.add_action(
            ':/plugins/QGIS_ISODATA/src/add.png',
            text=self.tr(u'Add'),
            callback=self.add_layer,
            parent=self.iface.mainWindow())
        self.add_action(
            ':/plugins/QGIS_ISODATA/src/clear.png',
            text=self.tr(u'Clear'),
            callback=self.remove_layers,
            parent=self.iface.mainWindow())
        self.add_action(
            ':/plugins/QGIS_ISODATA/src/play.png',
            text=self.tr(u'Solve'),
            callback=self.quickSolve,
            parent=self.iface.mainWindow())
        self.add_action(
            ':/plugins/QGIS_ISODATA/src/save.png',
            text=self.tr(u'Save'),
            callback=self.save_layer,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QGIS_ISODATA'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        # result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     sys.exit(result)

    def add_layer(self):
        filenames = QFileDialog(self.dlg).getOpenFileNames(self.dlg, '打开图像文件', filter='Image Files(*.png *.jpg *.bmp *.TIF)')
        for filename in filenames[0]:
            self.dlg.numOfPicture += 1
            layer = self.iface.addRasterLayer(filename, '通道 ' + str(self.dlg.numOfPicture))
            self.layers.append(layer.id())
            f = image.imread(filename)
            self.dlg.width = len(f)
            self.dlg.height = len(f[0])
            self.dlg.listWidget_IMG.addItem('通道 ' + str(self.dlg.numOfPicture) + ': ' + filename)
            self.dlg.img.append(f)

            tab = QtWidgets.QWidget()
            tab.setObjectName("tab")
            gridLayout_6 = QtWidgets.QGridLayout(tab)
            gridLayout_6.setContentsMargins(0, 0, 0, 0)
            gridLayout_6.setObjectName("gridLayout_6")
            scrollArea_2 = QtWidgets.QScrollArea(tab)
            scrollArea_2.setWidgetResizable(True)
            scrollArea_2.setObjectName("scrollArea_2")
            scrollAreaWidgetContents_2 = QtWidgets.QWidget()
            scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 570, 548))
            scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
            gridLayout_5 = QtWidgets.QGridLayout(scrollAreaWidgetContents_2)
            gridLayout_5.setContentsMargins(0, 0, 0, 0)
            gridLayout_5.setObjectName("gridLayout_5")
            label_Result = QtWidgets.QLabel(scrollAreaWidgetContents_2)
            label_Result.setObjectName("label_Result")
            gridLayout_5.addWidget(label_Result, 0, 1, 1, 1)
            scrollArea_2.setWidget(scrollAreaWidgetContents_2)
            gridLayout_6.addWidget(scrollArea_2, 0, 0, 1, 1)
            self.dlg.tabWidget.addTab(tab, "")
            self.dlg.tabWidget.setTabText(self.dlg.tabWidget.indexOf(tab), '通道 ' + str(self.dlg.numOfPicture))
            label_Result.setPixmap(QPixmap(filename))
            if self.dlg.isHidden() and self.progressBar.isHidden():
                self.progressBar.show()

    def save_layer(self):
        """
        Slot documentation goes here.
        """
        # TODO: not implemented yet
        if not self.dlg.finish:
            QMessageBox.information(self.dlg, 'ERROR', '没有可保存图像')
            return
        filename = QFileDialog.getSaveFileName(self.dlg, '保存文件', filter='Image Files(*.png *.jpg *.bmp *.TIF)')
        misc.imsave(filename[0], self.dlg.result)
        self.iface.addRasterLayer(filename[0], '分类结果')

    def remove_layer(self):
        """
        Slot documentation goes here.
        """
        # TODO: not implemented yet
        target = self.dlg.listWidget_IMG.currentRow()
        self.dlg.listWidget_IMG.takeItem(target)
        if self.dlg.img is not None:
            self.dlg.img.pop(target)
        self.dlg.tabWidget.removeTab(target)
        self.dlg.numOfPicture -= 1
        self.dlg.label_progress.setText('准备就绪')
        self.dlg.progressBar.setValue(0)
        QgsProject.instance().removeMapLayer(self.layers[target])
        if not self.progressBar.isHidden(): self.progressBar.hide()

    def remove_layers(self):
        """
        Slot documentation goes here.
        """
        # TODO: not implemented yet
        for i in range(len(self.layers)):
            self.dlg.listWidget_IMG.takeItem(i)
            try:
                self.dlg.img.pop(i)
            except:
                print('')
            self.dlg.tabWidget.removeTab(i)
            self.dlg.numOfPicture -= 1
            self.dlg.label_progress.setText('准备就绪')
            self.dlg.progressBar.setValue(0)
            QgsProject.instance().removeMapLayer(self.layers[i])
            if not self.progressBar.isHidden(): self.progressBar.hide()

    def quickSolve(self):
        self.progressBar.setWindowOpacity(1)
        self.dlg.K = 10
        self.dlg.L = 10
        self.dlg.I = 10
        self.dlg.thetaC = 10
        self.dlg.thetaN = 1000
        self.dlg.thetaS = 14
        self.dlg.lineEdit_K.setText('10')
        self.dlg.lineEdit_I.setText('10')
        self.dlg.lineEdit_thetaN.setText('1000')
        self.dlg.lineEdit_L.setText('10')
        self.dlg.lineEdit_thetaC.setText('10')
        self.dlg.lineEdit_thetaS.setText('14')
        self.dlg.pushButton_iteration.setEnabled(True)
        self.dlg.pushButton_cancel.setEnabled(True)

        if len(self.dlg.img) == 0:
            QMessageBox.information(self.dlg, 'ERROR', '未读入任何图像')
            return
        self.dlg.f = self.solve()
        if self.dlg.f is None:
            return
        self.dlg.result = ones((self.dlg.width, self.dlg.height, 3), dtype=uint8)

        # 生成和显示色斑图
        for i in range(len(self.dlg.f)):
            for fij in self.dlg.f[i]:
                self.dlg.result[fij[0], fij[1]] = self.dlg.colorMap[i]
        self.dlg.pushButton_changeColor.setEnabled(True)
        misc.imsave('D:/temp.png', self.dlg.result)
        self.dlg.label_IMG.setPixmap(QPixmap('D:/temp.png'))
        self.iface.addRasterLayer('D:/temp.png', '分类结果')
        self.dlg.label_progress.setText('完成！')
        self.dlg.pushButton_save.setEnabled(True)
        self.progressBar.close()
        # self.dlg.show()
        self.dlg.finish = True
        return

    def solve(self):
        img = {}
        for i in range(self.dlg.width):
            for j in range(self.dlg.height):
                img[(i, j)] = array([im[i, j] for im in self.dlg.img], dtype=int)
        del self.dlg.img

        C = 5
        M = 0.5
        # 随机生成初始中心点
        Z = [img[(0, s)] for s in range(C)]
        iteration = 0
        self.progressBar.setMax(self.dlg.I)
        self.progressBar.setValue(iteration)
        # self.label_progress.setText('正在进行第 ' + str(iteration) + ' / ' + str(self.I) + ' 次迭代...')
        while 1:
            iteration += 1
            # self.label_progress.setText('正在进行第 ' + str(iteration) + ' / ' + str(self.I) + ' 次迭代...')
            self.progressBar.setValue(iteration)
            # 求各点到聚类中心的距离
            f = [[] for i in range(len(Z))]
            for i in range(self.dlg.width):
                for j in range(self.dlg.height):
                    D = [distance(img[(i, j)], z) for z in Z]
                    f[D.index(min(D))].append((i, j))

            # 删除样本数少于最小样本数的类别
            def thetaNFilter(x):
                if len(x[0]) < self.dlg.thetaN:
                    return False
                else:
                    return True

            newlist = list(filter(thetaNFilter, [(ff, zz) for ff, zz in zip(f, Z)]))
            f = [x[0] for x in newlist]
            Z = [x[1] for x in newlist]

            # 计算新的聚类中心
            Z_temp = []
            for i in range(len(Z)):
                z = array([0 for i in range(self.dlg.numOfPicture)])
                for x in f[i]:
                    z = z + img[x]
                Z_temp.append(z / len(f[i]))
            Z = [i for i in Z_temp]

            # 判断是否是最后一次迭代
            if iteration == self.dlg.I:
                return f

            # 计算各聚类样本到聚类中心距离的平均值
            dj = array([0.0 for ff in f])
            for i, fj, zj in zip(range(len(Z)), f, Z):
                for fij in fj:
                    dj[i] += distance(img[fij], zj)
                dj[i] = dj[i] / len(fj)

            # 计算所有样本到相应聚类中心的距离平均值
            d_avg = sum(dj * array([len(i) for i in f])) / sum([len(i) for i in f])

            # 分裂操作
            time_of_division = 0
            if len(Z) < 2 * self.dlg.K and iteration % 2 == 1:
                # 计算每一类别样本与聚类中心距离标准差
                theta_S = []
                for fj, zj in zip(f, Z):
                    tan_f = [img[fij] for fij in fj]
                    thetaj = array([0 for i in range(self.dlg.numOfPicture)])
                    for fi in tan_f:
                        thetaj = thetaj + (fi - zj) ** 2
                    thetaj = sqrt(thetaj / (len(fj)))
                    theta_S.append([max(thetaj), thetaj.tolist().index(max(thetaj))])

                for fj, zj, thetajmax, j in zip(f, Z_temp, theta_S, range(len(Z_temp))):
                    if thetajmax[0] > self.dlg.thetaS:
                        if len(Z_temp) <= int(self.dlg.K / 2):
                            zj1 = array([i for i in zj])
                            zj2 = array([i for i in zj])
                            zj1[thetajmax[1]] = zj[thetajmax[1]] + thetajmax[0] * M
                            zj2[thetajmax[1]] = zj[thetajmax[1]] - thetajmax[0] * M
                            Z.pop(findArray(Z, Z_temp[j]))
                            Z.append(zj1)
                            Z.append(zj2)
                            time_of_division += 1
                            continue
                        if dj[j] > d_avg and len(f[j]) > 2 * (self.dlg.thetaN + 1):
                            zj1 = array([i for i in zj])
                            zj2 = array([i for i in zj])
                            zj1[thetajmax[1]] = zj[thetajmax[1]] + thetajmax[0] * M
                            zj2[thetajmax[1]] = zj[thetajmax[1]] - thetajmax[0] * M
                            Z.pop(findArray(Z, Z_temp[j]))
                            Z.append(zj1)
                            Z.append(zj2)
                            time_of_division += 1
                            continue
            # 分裂结束，进入下一次迭代
            if time_of_division != 0:
                continue

            # 合并操作
            d_z = {}
            for i in range(len(Z)):
                for j in range(len(Z)):
                    if i == j: continue
                    if distance(Z[i], Z[j]) < self.dlg.thetaC:
                        d_z[(i, j)] = distance(Z[i], Z[j])
            zNear = [i[0] for i in sorted(d_z.items(), key=lambda d: d[1])]
            combined = []
            for zz in zNear:
                if zz[0] not in combined and zz[1] not in combined:
                    z_double = (len(f[zz[0]]) * Z_temp[zz[0]] + len(f[zz[1]]) * Z_temp[zz[1]]) / (
                            len(f[zz[0]]) + len(f[zz[1]]))
                    Z.pop(findArray(Z, Z_temp[zz[0]]))
                    Z.pop(findArray(Z, Z_temp[zz[1]]))
                    Z.append(z_double)
                    combined.append(zz[0])
                    combined.append(zz[1])
